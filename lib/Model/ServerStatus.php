<?php
/**
 * ServerStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AdGuard Home
 *
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API.
 *
 * OpenAPI spec version: 0.107
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServerStatus Class Doc Comment
 *
 * @category Class
 * @description AdGuard Home server status and configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServerStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServerStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dns_addresses' => 'string[]',
'dns_port' => 'int',
'http_port' => 'int',
'protection_enabled' => 'bool',
'dhcp_available' => 'bool',
'running' => 'bool',
'version' => 'string',
'language' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dns_addresses' => null,
'dns_port' => 'uint16',
'http_port' => 'uint16',
'protection_enabled' => null,
'dhcp_available' => null,
'running' => null,
'version' => null,
'language' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dns_addresses' => 'dns_addresses',
'dns_port' => 'dns_port',
'http_port' => 'http_port',
'protection_enabled' => 'protection_enabled',
'dhcp_available' => 'dhcp_available',
'running' => 'running',
'version' => 'version',
'language' => 'language'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dns_addresses' => 'setDnsAddresses',
'dns_port' => 'setDnsPort',
'http_port' => 'setHttpPort',
'protection_enabled' => 'setProtectionEnabled',
'dhcp_available' => 'setDhcpAvailable',
'running' => 'setRunning',
'version' => 'setVersion',
'language' => 'setLanguage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dns_addresses' => 'getDnsAddresses',
'dns_port' => 'getDnsPort',
'http_port' => 'getHttpPort',
'protection_enabled' => 'getProtectionEnabled',
'dhcp_available' => 'getDhcpAvailable',
'running' => 'getRunning',
'version' => 'getVersion',
'language' => 'getLanguage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dns_addresses'] = isset($data['dns_addresses']) ? $data['dns_addresses'] : null;
        $this->container['dns_port'] = isset($data['dns_port']) ? $data['dns_port'] : null;
        $this->container['http_port'] = isset($data['http_port']) ? $data['http_port'] : null;
        $this->container['protection_enabled'] = isset($data['protection_enabled']) ? $data['protection_enabled'] : null;
        $this->container['dhcp_available'] = isset($data['dhcp_available']) ? $data['dhcp_available'] : null;
        $this->container['running'] = isset($data['running']) ? $data['running'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dns_addresses'] === null) {
            $invalidProperties[] = "'dns_addresses' can't be null";
        }
        if ($this->container['dns_port'] === null) {
            $invalidProperties[] = "'dns_port' can't be null";
        }
        if ($this->container['http_port'] === null) {
            $invalidProperties[] = "'http_port' can't be null";
        }
        if ($this->container['protection_enabled'] === null) {
            $invalidProperties[] = "'protection_enabled' can't be null";
        }
        if ($this->container['running'] === null) {
            $invalidProperties[] = "'running' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dns_addresses
     *
     * @return string[]
     */
    public function getDnsAddresses()
    {
        return $this->container['dns_addresses'];
    }

    /**
     * Sets dns_addresses
     *
     * @param string[] $dns_addresses dns_addresses
     *
     * @return $this
     */
    public function setDnsAddresses($dns_addresses)
    {
        $this->container['dns_addresses'] = $dns_addresses;

        return $this;
    }

    /**
     * Gets dns_port
     *
     * @return int
     */
    public function getDnsPort()
    {
        return $this->container['dns_port'];
    }

    /**
     * Sets dns_port
     *
     * @param int $dns_port dns_port
     *
     * @return $this
     */
    public function setDnsPort($dns_port)
    {
        $this->container['dns_port'] = $dns_port;

        return $this;
    }

    /**
     * Gets http_port
     *
     * @return int
     */
    public function getHttpPort()
    {
        return $this->container['http_port'];
    }

    /**
     * Sets http_port
     *
     * @param int $http_port http_port
     *
     * @return $this
     */
    public function setHttpPort($http_port)
    {
        $this->container['http_port'] = $http_port;

        return $this;
    }

    /**
     * Gets protection_enabled
     *
     * @return bool
     */
    public function getProtectionEnabled()
    {
        return $this->container['protection_enabled'];
    }

    /**
     * Sets protection_enabled
     *
     * @param bool $protection_enabled protection_enabled
     *
     * @return $this
     */
    public function setProtectionEnabled($protection_enabled)
    {
        $this->container['protection_enabled'] = $protection_enabled;

        return $this;
    }

    /**
     * Gets dhcp_available
     *
     * @return bool
     */
    public function getDhcpAvailable()
    {
        return $this->container['dhcp_available'];
    }

    /**
     * Sets dhcp_available
     *
     * @param bool $dhcp_available dhcp_available
     *
     * @return $this
     */
    public function setDhcpAvailable($dhcp_available)
    {
        $this->container['dhcp_available'] = $dhcp_available;

        return $this;
    }

    /**
     * Gets running
     *
     * @return bool
     */
    public function getRunning()
    {
        return $this->container['running'];
    }

    /**
     * Sets running
     *
     * @param bool $running running
     *
     * @return $this
     */
    public function setRunning($running)
    {
        $this->container['running'] = $running;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
