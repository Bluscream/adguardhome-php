<?php
/**
 * Stats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AdGuard Home
 *
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API.
 *
 * OpenAPI spec version: 0.107
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Stats Class Doc Comment
 *
 * @category Class
 * @description Server statistics data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Stats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_units' => 'string',
'num_dns_queries' => 'int',
'num_blocked_filtering' => 'int',
'num_replaced_safebrowsing' => 'int',
'num_replaced_safesearch' => 'int',
'num_replaced_parental' => 'int',
'avg_processing_time' => 'float',
'top_queried_domains' => '\Swagger\Client\Model\TopArrayEntry[]',
'top_clients' => '\Swagger\Client\Model\TopArrayEntry[]',
'top_blocked_domains' => '\Swagger\Client\Model\TopArrayEntry[]',
'dns_queries' => 'int[]',
'blocked_filtering' => 'int[]',
'replaced_safebrowsing' => 'int[]',
'replaced_parental' => 'int[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time_units' => null,
'num_dns_queries' => null,
'num_blocked_filtering' => null,
'num_replaced_safebrowsing' => null,
'num_replaced_safesearch' => null,
'num_replaced_parental' => null,
'avg_processing_time' => 'float',
'top_queried_domains' => null,
'top_clients' => null,
'top_blocked_domains' => null,
'dns_queries' => null,
'blocked_filtering' => null,
'replaced_safebrowsing' => null,
'replaced_parental' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_units' => 'time_units',
'num_dns_queries' => 'num_dns_queries',
'num_blocked_filtering' => 'num_blocked_filtering',
'num_replaced_safebrowsing' => 'num_replaced_safebrowsing',
'num_replaced_safesearch' => 'num_replaced_safesearch',
'num_replaced_parental' => 'num_replaced_parental',
'avg_processing_time' => 'avg_processing_time',
'top_queried_domains' => 'top_queried_domains',
'top_clients' => 'top_clients',
'top_blocked_domains' => 'top_blocked_domains',
'dns_queries' => 'dns_queries',
'blocked_filtering' => 'blocked_filtering',
'replaced_safebrowsing' => 'replaced_safebrowsing',
'replaced_parental' => 'replaced_parental'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_units' => 'setTimeUnits',
'num_dns_queries' => 'setNumDnsQueries',
'num_blocked_filtering' => 'setNumBlockedFiltering',
'num_replaced_safebrowsing' => 'setNumReplacedSafebrowsing',
'num_replaced_safesearch' => 'setNumReplacedSafesearch',
'num_replaced_parental' => 'setNumReplacedParental',
'avg_processing_time' => 'setAvgProcessingTime',
'top_queried_domains' => 'setTopQueriedDomains',
'top_clients' => 'setTopClients',
'top_blocked_domains' => 'setTopBlockedDomains',
'dns_queries' => 'setDnsQueries',
'blocked_filtering' => 'setBlockedFiltering',
'replaced_safebrowsing' => 'setReplacedSafebrowsing',
'replaced_parental' => 'setReplacedParental'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_units' => 'getTimeUnits',
'num_dns_queries' => 'getNumDnsQueries',
'num_blocked_filtering' => 'getNumBlockedFiltering',
'num_replaced_safebrowsing' => 'getNumReplacedSafebrowsing',
'num_replaced_safesearch' => 'getNumReplacedSafesearch',
'num_replaced_parental' => 'getNumReplacedParental',
'avg_processing_time' => 'getAvgProcessingTime',
'top_queried_domains' => 'getTopQueriedDomains',
'top_clients' => 'getTopClients',
'top_blocked_domains' => 'getTopBlockedDomains',
'dns_queries' => 'getDnsQueries',
'blocked_filtering' => 'getBlockedFiltering',
'replaced_safebrowsing' => 'getReplacedSafebrowsing',
'replaced_parental' => 'getReplacedParental'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIME_UNITS_HOURS = 'hours';
const TIME_UNITS_DAYS = 'days';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeUnitsAllowableValues()
    {
        return [
            self::TIME_UNITS_HOURS,
self::TIME_UNITS_DAYS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_units'] = isset($data['time_units']) ? $data['time_units'] : null;
        $this->container['num_dns_queries'] = isset($data['num_dns_queries']) ? $data['num_dns_queries'] : null;
        $this->container['num_blocked_filtering'] = isset($data['num_blocked_filtering']) ? $data['num_blocked_filtering'] : null;
        $this->container['num_replaced_safebrowsing'] = isset($data['num_replaced_safebrowsing']) ? $data['num_replaced_safebrowsing'] : null;
        $this->container['num_replaced_safesearch'] = isset($data['num_replaced_safesearch']) ? $data['num_replaced_safesearch'] : null;
        $this->container['num_replaced_parental'] = isset($data['num_replaced_parental']) ? $data['num_replaced_parental'] : null;
        $this->container['avg_processing_time'] = isset($data['avg_processing_time']) ? $data['avg_processing_time'] : null;
        $this->container['top_queried_domains'] = isset($data['top_queried_domains']) ? $data['top_queried_domains'] : null;
        $this->container['top_clients'] = isset($data['top_clients']) ? $data['top_clients'] : null;
        $this->container['top_blocked_domains'] = isset($data['top_blocked_domains']) ? $data['top_blocked_domains'] : null;
        $this->container['dns_queries'] = isset($data['dns_queries']) ? $data['dns_queries'] : null;
        $this->container['blocked_filtering'] = isset($data['blocked_filtering']) ? $data['blocked_filtering'] : null;
        $this->container['replaced_safebrowsing'] = isset($data['replaced_safebrowsing']) ? $data['replaced_safebrowsing'] : null;
        $this->container['replaced_parental'] = isset($data['replaced_parental']) ? $data['replaced_parental'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimeUnitsAllowableValues();
        if (!is_null($this->container['time_units']) && !in_array($this->container['time_units'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'time_units', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_units
     *
     * @return string
     */
    public function getTimeUnits()
    {
        return $this->container['time_units'];
    }

    /**
     * Sets time_units
     *
     * @param string $time_units Time units
     *
     * @return $this
     */
    public function setTimeUnits($time_units)
    {
        $allowedValues = $this->getTimeUnitsAllowableValues();
        if (!is_null($time_units) && !in_array($time_units, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_units', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_units'] = $time_units;

        return $this;
    }

    /**
     * Gets num_dns_queries
     *
     * @return int
     */
    public function getNumDnsQueries()
    {
        return $this->container['num_dns_queries'];
    }

    /**
     * Sets num_dns_queries
     *
     * @param int $num_dns_queries Total number of DNS queries
     *
     * @return $this
     */
    public function setNumDnsQueries($num_dns_queries)
    {
        $this->container['num_dns_queries'] = $num_dns_queries;

        return $this;
    }

    /**
     * Gets num_blocked_filtering
     *
     * @return int
     */
    public function getNumBlockedFiltering()
    {
        return $this->container['num_blocked_filtering'];
    }

    /**
     * Sets num_blocked_filtering
     *
     * @param int $num_blocked_filtering Number of requests blocked by filtering rules
     *
     * @return $this
     */
    public function setNumBlockedFiltering($num_blocked_filtering)
    {
        $this->container['num_blocked_filtering'] = $num_blocked_filtering;

        return $this;
    }

    /**
     * Gets num_replaced_safebrowsing
     *
     * @return int
     */
    public function getNumReplacedSafebrowsing()
    {
        return $this->container['num_replaced_safebrowsing'];
    }

    /**
     * Sets num_replaced_safebrowsing
     *
     * @param int $num_replaced_safebrowsing Number of requests blocked by safebrowsing module
     *
     * @return $this
     */
    public function setNumReplacedSafebrowsing($num_replaced_safebrowsing)
    {
        $this->container['num_replaced_safebrowsing'] = $num_replaced_safebrowsing;

        return $this;
    }

    /**
     * Gets num_replaced_safesearch
     *
     * @return int
     */
    public function getNumReplacedSafesearch()
    {
        return $this->container['num_replaced_safesearch'];
    }

    /**
     * Sets num_replaced_safesearch
     *
     * @param int $num_replaced_safesearch Number of requests blocked by safesearch module
     *
     * @return $this
     */
    public function setNumReplacedSafesearch($num_replaced_safesearch)
    {
        $this->container['num_replaced_safesearch'] = $num_replaced_safesearch;

        return $this;
    }

    /**
     * Gets num_replaced_parental
     *
     * @return int
     */
    public function getNumReplacedParental()
    {
        return $this->container['num_replaced_parental'];
    }

    /**
     * Sets num_replaced_parental
     *
     * @param int $num_replaced_parental Number of blocked adult websites
     *
     * @return $this
     */
    public function setNumReplacedParental($num_replaced_parental)
    {
        $this->container['num_replaced_parental'] = $num_replaced_parental;

        return $this;
    }

    /**
     * Gets avg_processing_time
     *
     * @return float
     */
    public function getAvgProcessingTime()
    {
        return $this->container['avg_processing_time'];
    }

    /**
     * Sets avg_processing_time
     *
     * @param float $avg_processing_time Average time in milliseconds on processing a DNS
     *
     * @return $this
     */
    public function setAvgProcessingTime($avg_processing_time)
    {
        $this->container['avg_processing_time'] = $avg_processing_time;

        return $this;
    }

    /**
     * Gets top_queried_domains
     *
     * @return \Swagger\Client\Model\TopArrayEntry[]
     */
    public function getTopQueriedDomains()
    {
        return $this->container['top_queried_domains'];
    }

    /**
     * Sets top_queried_domains
     *
     * @param \Swagger\Client\Model\TopArrayEntry[] $top_queried_domains top_queried_domains
     *
     * @return $this
     */
    public function setTopQueriedDomains($top_queried_domains)
    {
        $this->container['top_queried_domains'] = $top_queried_domains;

        return $this;
    }

    /**
     * Gets top_clients
     *
     * @return \Swagger\Client\Model\TopArrayEntry[]
     */
    public function getTopClients()
    {
        return $this->container['top_clients'];
    }

    /**
     * Sets top_clients
     *
     * @param \Swagger\Client\Model\TopArrayEntry[] $top_clients top_clients
     *
     * @return $this
     */
    public function setTopClients($top_clients)
    {
        $this->container['top_clients'] = $top_clients;

        return $this;
    }

    /**
     * Gets top_blocked_domains
     *
     * @return \Swagger\Client\Model\TopArrayEntry[]
     */
    public function getTopBlockedDomains()
    {
        return $this->container['top_blocked_domains'];
    }

    /**
     * Sets top_blocked_domains
     *
     * @param \Swagger\Client\Model\TopArrayEntry[] $top_blocked_domains top_blocked_domains
     *
     * @return $this
     */
    public function setTopBlockedDomains($top_blocked_domains)
    {
        $this->container['top_blocked_domains'] = $top_blocked_domains;

        return $this;
    }

    /**
     * Gets dns_queries
     *
     * @return int[]
     */
    public function getDnsQueries()
    {
        return $this->container['dns_queries'];
    }

    /**
     * Sets dns_queries
     *
     * @param int[] $dns_queries dns_queries
     *
     * @return $this
     */
    public function setDnsQueries($dns_queries)
    {
        $this->container['dns_queries'] = $dns_queries;

        return $this;
    }

    /**
     * Gets blocked_filtering
     *
     * @return int[]
     */
    public function getBlockedFiltering()
    {
        return $this->container['blocked_filtering'];
    }

    /**
     * Sets blocked_filtering
     *
     * @param int[] $blocked_filtering blocked_filtering
     *
     * @return $this
     */
    public function setBlockedFiltering($blocked_filtering)
    {
        $this->container['blocked_filtering'] = $blocked_filtering;

        return $this;
    }

    /**
     * Gets replaced_safebrowsing
     *
     * @return int[]
     */
    public function getReplacedSafebrowsing()
    {
        return $this->container['replaced_safebrowsing'];
    }

    /**
     * Sets replaced_safebrowsing
     *
     * @param int[] $replaced_safebrowsing replaced_safebrowsing
     *
     * @return $this
     */
    public function setReplacedSafebrowsing($replaced_safebrowsing)
    {
        $this->container['replaced_safebrowsing'] = $replaced_safebrowsing;

        return $this;
    }

    /**
     * Gets replaced_parental
     *
     * @return int[]
     */
    public function getReplacedParental()
    {
        return $this->container['replaced_parental'];
    }

    /**
     * Sets replaced_parental
     *
     * @param int[] $replaced_parental replaced_parental
     *
     * @return $this
     */
    public function setReplacedParental($replaced_parental)
    {
        $this->container['replaced_parental'] = $replaced_parental;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
