<?php
/**
 * QueryLogItemClient
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AdGuard Home
 *
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API.
 *
 * OpenAPI spec version: 0.107
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QueryLogItemClient Class Doc Comment
 *
 * @category Class
 * @description Client information for a query log item.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryLogItemClient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryLogItemClient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'disallowed' => 'bool',
'disallowed_rule' => 'string',
'name' => 'string',
'whois' => '\Swagger\Client\Model\QueryLogItemClientWhois'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'disallowed' => null,
'disallowed_rule' => null,
'name' => null,
'whois' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disallowed' => 'disallowed',
'disallowed_rule' => 'disallowed_rule',
'name' => 'name',
'whois' => 'whois'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disallowed' => 'setDisallowed',
'disallowed_rule' => 'setDisallowedRule',
'name' => 'setName',
'whois' => 'setWhois'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disallowed' => 'getDisallowed',
'disallowed_rule' => 'getDisallowedRule',
'name' => 'getName',
'whois' => 'getWhois'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disallowed'] = isset($data['disallowed']) ? $data['disallowed'] : null;
        $this->container['disallowed_rule'] = isset($data['disallowed_rule']) ? $data['disallowed_rule'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['whois'] = isset($data['whois']) ? $data['whois'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['disallowed'] === null) {
            $invalidProperties[] = "'disallowed' can't be null";
        }
        if ($this->container['disallowed_rule'] === null) {
            $invalidProperties[] = "'disallowed_rule' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['whois'] === null) {
            $invalidProperties[] = "'whois' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disallowed
     *
     * @return bool
     */
    public function getDisallowed()
    {
        return $this->container['disallowed'];
    }

    /**
     * Sets disallowed
     *
     * @param bool $disallowed Whether the client's IP is blocked or not.
     *
     * @return $this
     */
    public function setDisallowed($disallowed)
    {
        $this->container['disallowed'] = $disallowed;

        return $this;
    }

    /**
     * Gets disallowed_rule
     *
     * @return string
     */
    public function getDisallowedRule()
    {
        return $this->container['disallowed_rule'];
    }

    /**
     * Sets disallowed_rule
     *
     * @param string $disallowed_rule The rule due to which the client is allowed or blocked.
     *
     * @return $this
     */
    public function setDisallowedRule($disallowed_rule)
    {
        $this->container['disallowed_rule'] = $disallowed_rule;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Persistent client's name or runtime client's hostname.  May be empty.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets whois
     *
     * @return \Swagger\Client\Model\QueryLogItemClientWhois
     */
    public function getWhois()
    {
        return $this->container['whois'];
    }

    /**
     * Sets whois
     *
     * @param \Swagger\Client\Model\QueryLogItemClientWhois $whois whois
     *
     * @return $this
     */
    public function setWhois($whois)
    {
        $this->container['whois'] = $whois;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
