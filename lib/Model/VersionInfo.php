<?php
/**
 * VersionInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AdGuard Home
 *
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API.
 *
 * OpenAPI spec version: 0.107
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VersionInfo Class Doc Comment
 *
 * @category Class
 * @description Information about the latest available version of AdGuard Home.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VersionInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VersionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'disabled' => 'bool',
'new_version' => 'string',
'announcement' => 'string',
'announcement_url' => 'string',
'can_autoupdate' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'disabled' => null,
'new_version' => null,
'announcement' => null,
'announcement_url' => null,
'can_autoupdate' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disabled' => 'disabled',
'new_version' => 'new_version',
'announcement' => 'announcement',
'announcement_url' => 'announcement_url',
'can_autoupdate' => 'can_autoupdate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disabled' => 'setDisabled',
'new_version' => 'setNewVersion',
'announcement' => 'setAnnouncement',
'announcement_url' => 'setAnnouncementUrl',
'can_autoupdate' => 'setCanAutoupdate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disabled' => 'getDisabled',
'new_version' => 'getNewVersion',
'announcement' => 'getAnnouncement',
'announcement_url' => 'getAnnouncementUrl',
'can_autoupdate' => 'getCanAutoupdate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['new_version'] = isset($data['new_version']) ? $data['new_version'] : null;
        $this->container['announcement'] = isset($data['announcement']) ? $data['announcement'] : null;
        $this->container['announcement_url'] = isset($data['announcement_url']) ? $data['announcement_url'] : null;
        $this->container['can_autoupdate'] = isset($data['can_autoupdate']) ? $data['can_autoupdate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['disabled'] === null) {
            $invalidProperties[] = "'disabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled If true then other fields doesn't appear.
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets new_version
     *
     * @return string
     */
    public function getNewVersion()
    {
        return $this->container['new_version'];
    }

    /**
     * Sets new_version
     *
     * @param string $new_version new_version
     *
     * @return $this
     */
    public function setNewVersion($new_version)
    {
        $this->container['new_version'] = $new_version;

        return $this;
    }

    /**
     * Gets announcement
     *
     * @return string
     */
    public function getAnnouncement()
    {
        return $this->container['announcement'];
    }

    /**
     * Sets announcement
     *
     * @param string $announcement announcement
     *
     * @return $this
     */
    public function setAnnouncement($announcement)
    {
        $this->container['announcement'] = $announcement;

        return $this;
    }

    /**
     * Gets announcement_url
     *
     * @return string
     */
    public function getAnnouncementUrl()
    {
        return $this->container['announcement_url'];
    }

    /**
     * Sets announcement_url
     *
     * @param string $announcement_url announcement_url
     *
     * @return $this
     */
    public function setAnnouncementUrl($announcement_url)
    {
        $this->container['announcement_url'] = $announcement_url;

        return $this;
    }

    /**
     * Gets can_autoupdate
     *
     * @return bool
     */
    public function getCanAutoupdate()
    {
        return $this->container['can_autoupdate'];
    }

    /**
     * Sets can_autoupdate
     *
     * @param bool $can_autoupdate can_autoupdate
     *
     * @return $this
     */
    public function setCanAutoupdate($can_autoupdate)
    {
        $this->container['can_autoupdate'] = $can_autoupdate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
