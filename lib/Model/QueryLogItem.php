<?php
/**
 * QueryLogItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AdGuard Home
 *
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API.
 *
 * OpenAPI spec version: 0.107
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QueryLogItem Class Doc Comment
 *
 * @category Class
 * @description Query log item
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryLogItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryLogItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'answer' => '\Swagger\Client\Model\DnsAnswer[]',
'original_answer' => '\Swagger\Client\Model\DnsAnswer[]',
'cached' => 'bool',
'upstream' => 'string',
'answer_dnssec' => 'bool',
'client' => 'string',
'client_id' => 'string',
'client_info' => '\Swagger\Client\Model\QueryLogItemClient',
'client_proto' => 'string',
'ecs' => 'string',
'elapsed_ms' => 'string',
'question' => '\Swagger\Client\Model\DnsQuestion',
'filter_id' => 'int',
'rule' => 'string',
'rules' => '\Swagger\Client\Model\ResultRule[]',
'reason' => 'string',
'service_name' => 'string',
'status' => 'string',
'time' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'answer' => null,
'original_answer' => null,
'cached' => null,
'upstream' => null,
'answer_dnssec' => null,
'client' => null,
'client_id' => null,
'client_info' => null,
'client_proto' => null,
'ecs' => null,
'elapsed_ms' => null,
'question' => null,
'filter_id' => null,
'rule' => null,
'rules' => null,
'reason' => null,
'service_name' => null,
'status' => null,
'time' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answer' => 'answer',
'original_answer' => 'original_answer',
'cached' => 'cached',
'upstream' => 'upstream',
'answer_dnssec' => 'answer_dnssec',
'client' => 'client',
'client_id' => 'client_id',
'client_info' => 'client_info',
'client_proto' => 'client_proto',
'ecs' => 'ecs',
'elapsed_ms' => 'elapsedMs',
'question' => 'question',
'filter_id' => 'filterId',
'rule' => 'rule',
'rules' => 'rules',
'reason' => 'reason',
'service_name' => 'service_name',
'status' => 'status',
'time' => 'time'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answer' => 'setAnswer',
'original_answer' => 'setOriginalAnswer',
'cached' => 'setCached',
'upstream' => 'setUpstream',
'answer_dnssec' => 'setAnswerDnssec',
'client' => 'setClient',
'client_id' => 'setClientId',
'client_info' => 'setClientInfo',
'client_proto' => 'setClientProto',
'ecs' => 'setEcs',
'elapsed_ms' => 'setElapsedMs',
'question' => 'setQuestion',
'filter_id' => 'setFilterId',
'rule' => 'setRule',
'rules' => 'setRules',
'reason' => 'setReason',
'service_name' => 'setServiceName',
'status' => 'setStatus',
'time' => 'setTime'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answer' => 'getAnswer',
'original_answer' => 'getOriginalAnswer',
'cached' => 'getCached',
'upstream' => 'getUpstream',
'answer_dnssec' => 'getAnswerDnssec',
'client' => 'getClient',
'client_id' => 'getClientId',
'client_info' => 'getClientInfo',
'client_proto' => 'getClientProto',
'ecs' => 'getEcs',
'elapsed_ms' => 'getElapsedMs',
'question' => 'getQuestion',
'filter_id' => 'getFilterId',
'rule' => 'getRule',
'rules' => 'getRules',
'reason' => 'getReason',
'service_name' => 'getServiceName',
'status' => 'getStatus',
'time' => 'getTime'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REASON_NOT_FILTERED_NOT_FOUND = 'NotFilteredNotFound';
const REASON_NOT_FILTERED_WHITE_LIST = 'NotFilteredWhiteList';
const REASON_NOT_FILTERED_ERROR = 'NotFilteredError';
const REASON_FILTERED_BLACK_LIST = 'FilteredBlackList';
const REASON_FILTERED_SAFE_BROWSING = 'FilteredSafeBrowsing';
const REASON_FILTERED_PARENTAL = 'FilteredParental';
const REASON_FILTERED_INVALID = 'FilteredInvalid';
const REASON_FILTERED_SAFE_SEARCH = 'FilteredSafeSearch';
const REASON_FILTERED_BLOCKED_SERVICE = 'FilteredBlockedService';
const REASON_REWRITE = 'Rewrite';
const REASON_REWRITE_ETC_HOSTS = 'RewriteEtcHosts';
const REASON_REWRITE_RULE = 'RewriteRule';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_NOT_FILTERED_NOT_FOUND,
self::REASON_NOT_FILTERED_WHITE_LIST,
self::REASON_NOT_FILTERED_ERROR,
self::REASON_FILTERED_BLACK_LIST,
self::REASON_FILTERED_SAFE_BROWSING,
self::REASON_FILTERED_PARENTAL,
self::REASON_FILTERED_INVALID,
self::REASON_FILTERED_SAFE_SEARCH,
self::REASON_FILTERED_BLOCKED_SERVICE,
self::REASON_REWRITE,
self::REASON_REWRITE_ETC_HOSTS,
self::REASON_REWRITE_RULE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['answer'] = isset($data['answer']) ? $data['answer'] : null;
        $this->container['original_answer'] = isset($data['original_answer']) ? $data['original_answer'] : null;
        $this->container['cached'] = isset($data['cached']) ? $data['cached'] : null;
        $this->container['upstream'] = isset($data['upstream']) ? $data['upstream'] : null;
        $this->container['answer_dnssec'] = isset($data['answer_dnssec']) ? $data['answer_dnssec'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_info'] = isset($data['client_info']) ? $data['client_info'] : null;
        $this->container['client_proto'] = isset($data['client_proto']) ? $data['client_proto'] : null;
        $this->container['ecs'] = isset($data['ecs']) ? $data['ecs'] : null;
        $this->container['elapsed_ms'] = isset($data['elapsed_ms']) ? $data['elapsed_ms'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['filter_id'] = isset($data['filter_id']) ? $data['filter_id'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
        $this->container['rules'] = isset($data['rules']) ? $data['rules'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answer
     *
     * @return \Swagger\Client\Model\DnsAnswer[]
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param \Swagger\Client\Model\DnsAnswer[] $answer answer
     *
     * @return $this
     */
    public function setAnswer($answer)
    {
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets original_answer
     *
     * @return \Swagger\Client\Model\DnsAnswer[]
     */
    public function getOriginalAnswer()
    {
        return $this->container['original_answer'];
    }

    /**
     * Sets original_answer
     *
     * @param \Swagger\Client\Model\DnsAnswer[] $original_answer Answer from upstream server (optional)
     *
     * @return $this
     */
    public function setOriginalAnswer($original_answer)
    {
        $this->container['original_answer'] = $original_answer;

        return $this;
    }

    /**
     * Gets cached
     *
     * @return bool
     */
    public function getCached()
    {
        return $this->container['cached'];
    }

    /**
     * Sets cached
     *
     * @param bool $cached Defines if the response has been served from cache.
     *
     * @return $this
     */
    public function setCached($cached)
    {
        $this->container['cached'] = $cached;

        return $this;
    }

    /**
     * Gets upstream
     *
     * @return string
     */
    public function getUpstream()
    {
        return $this->container['upstream'];
    }

    /**
     * Sets upstream
     *
     * @param string $upstream Upstream URL starting with tcp://, tls://, https://, or with an IP address.
     *
     * @return $this
     */
    public function setUpstream($upstream)
    {
        $this->container['upstream'] = $upstream;

        return $this;
    }

    /**
     * Gets answer_dnssec
     *
     * @return bool
     */
    public function getAnswerDnssec()
    {
        return $this->container['answer_dnssec'];
    }

    /**
     * Sets answer_dnssec
     *
     * @param bool $answer_dnssec If true, the response had the Authenticated Data (AD) flag set.
     *
     * @return $this
     */
    public function setAnswerDnssec($answer_dnssec)
    {
        $this->container['answer_dnssec'] = $answer_dnssec;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string $client The client's IP address.
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id The ClientID, if provided in DoH, DoQ, or DoT.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Swagger\Client\Model\QueryLogItemClient
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Swagger\Client\Model\QueryLogItemClient $client_info client_info
     *
     * @return $this
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets client_proto
     *
     * @return string
     */
    public function getClientProto()
    {
        return $this->container['client_proto'];
    }

    /**
     * Sets client_proto
     *
     * @param string $client_proto client_proto
     *
     * @return $this
     */
    public function setClientProto($client_proto)
    {
        $this->container['client_proto'] = $client_proto;

        return $this;
    }

    /**
     * Gets ecs
     *
     * @return string
     */
    public function getEcs()
    {
        return $this->container['ecs'];
    }

    /**
     * Sets ecs
     *
     * @param string $ecs The IP network defined by an EDNS Client-Subnet option in the request message if any.
     *
     * @return $this
     */
    public function setEcs($ecs)
    {
        $this->container['ecs'] = $ecs;

        return $this;
    }

    /**
     * Gets elapsed_ms
     *
     * @return string
     */
    public function getElapsedMs()
    {
        return $this->container['elapsed_ms'];
    }

    /**
     * Sets elapsed_ms
     *
     * @param string $elapsed_ms elapsed_ms
     *
     * @return $this
     */
    public function setElapsedMs($elapsed_ms)
    {
        $this->container['elapsed_ms'] = $elapsed_ms;

        return $this;
    }

    /**
     * Gets question
     *
     * @return \Swagger\Client\Model\DnsQuestion
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param \Swagger\Client\Model\DnsQuestion $question question
     *
     * @return $this
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets filter_id
     *
     * @return int
     */
    public function getFilterId()
    {
        return $this->container['filter_id'];
    }

    /**
     * Sets filter_id
     *
     * @param int $filter_id In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to. Deprecated: use `rules[*].filter_list_id` instead.
     *
     * @return $this
     */
    public function setFilterId($filter_id)
    {
        $this->container['filter_id'] = $filter_id;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return string
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param string $rule Filtering rule applied to the request (if any). Deprecated: use `rules[*].text` instead.
     *
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \Swagger\Client\Model\ResultRule[]
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \Swagger\Client\Model\ResultRule[] $rules Applied rules.
     *
     * @return $this
     */
    public function setRules($rules)
    {
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Request filtering status.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string $service_name Set if reason=FilteredBlockedService
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status DNS response status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time DNS request processing start time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
